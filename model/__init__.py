#! /usr/bin/env python
# -*- coding: utf-8 -*-

# 网上解释

# -- 贫血模型：是指 model 层只有 get 和 set 方法，或者包含少量的 CRUD 方法，所有的业务逻辑都不包含在内而是放在 service 层。
# ---- 优点：层次分明
# ---- 缺点：面向过程，service 层过重

# -- 充血模型：层次结构和上面的差不多，不过大多业务逻辑和持久化放在 model层 里面，service 层只是简单封装部分业务逻辑以及控制事务、权限等。
# ---- 优点：面向对象，自洽程度很高
# ---- 缺点：model/service 层边界划分需要很高的业务认知和技术经验


# 个人理解

# 贫血模型
# -- model 层边界定义：
# -- 1，-- 数据表映射关系，划分到 model 层。
# -- 2，-- dao 层也就是广义数据持久层（增删改查逻辑），可以划分为 model 逻辑，也可以单独拆分出去，这里划分到 model 层。
# -- 3，-- 与当前数据模型的一条数据记录相关的业务逻辑（与持久化无关的业务逻辑），可以直接作为 model 对象的属性实现，也划分到 model 层。
# -- service 层边界定义：
# -- 4，-- 与一个数据模型的多条数据记录相关的业务逻辑（与持久化逻辑有关的业务逻辑），划分到 service 中。
# -- 5，-- 与多个数据模型相关的业务逻辑（与持久化逻辑有关的业务逻辑），划分到 service 中。
# -- 6，-- 权限控制，事务控制逻辑，划分到 service 中。

# 充血模型
# -- model 层边界定义：
# -- 1，-- 数据表映射关系，划分到 model 层。
# -- 2，-- dao 层也就是广义数据持久层（增删改查逻辑），可以划分为 model 逻辑，也可以单独拆分出去，这里划分到 model 层。
# -- 3，-- 与当前数据模型的一条数据记录相关的业务逻辑（与持久化无关的业务逻辑），可以直接作为 model 对象的属性实现，也划分到 model 层。
# -- 4，-- 与当前数据模型的多条数据记录相关的业务逻辑（与持久化逻辑有关的业务逻辑），划分到 model 中。
# -- service 层边界定义：
# -- 5，-- 与多个数据模型相关的业务逻辑（与持久化逻辑有关的业务逻辑），划分到 service 中。
# -- 6，-- 权限控制，事务控制逻辑，划分到 service 中。
