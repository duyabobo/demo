#! /usr/bin/env python
# -*- coding: utf-8 -*- 
# rpc可以基于tcp，也可以基于http。
# 基于http开发，简单快速，有几点劣势：
# 1，每次发起请求，都要三次握手建立链接，请求结束后都要关闭链接。解决方案：使用http链接池。
# 2，http报文过于复杂，导致有效内容传输利用率不高。其实就是需要更高的带宽而已，缓解方案：对response使用pickle编码后传输。
# 3，基于nginx的反向代理，无法动态扩充服务器，必须手动修改ng配置才行。忽略原因：我们用不着上百台rpc服务器，也不需要zookeeper去服务注册和发现。
# 4，服务之间调用，服务ip是很少的（跟正常对外服务的用户ip数量级相比），使用ng负载均衡服务内部之间的调用有点大材小用，损失性能。忽略原因：这点性能损失，不用理会。
